# Keybindings
set-option -g mouse on
set -g status-keys emacs
set -g mode-keys vi
set -s set-clipboard on
bind c new-window -c "#{pane_current_path}"
bind % split-window -hc "#{pane_current_path}"
bind '"' split-window -vc "#{pane_current_path}"
bind b break-pane
bind j choose-tree "join-pane -h -s %%"
bind e choose-tree "swap-pane -t %%"
bind S command-prompt -p 'Session name:' 'new-session -s %1'
bind -n C-v run "tmux set-buffer \"$(wl-paste)\" && tmux paste-buffer"
bind -n M-v display-popup -E "clipcat-menu insert && tmux set-buffer \"$(wl-paste)\" && tmux paste-buffer"

# Lazy Tmux Menu
set -g prefix M-b
bind -n C-b display-menu -T "Tmux" -x C -y S \
  "Create Pane Right" % "split-window -hc '#{pane_current_path}'" \
  "Create Pane Below" '"' "split-window -vc '#{pane_current_path}'" \
  "Attach(join) Pane" j "choose-tree -Z 'join-pane -h -s %%'" \
  "Detach(break) Pane" b "break-pane" \
  "Focus Pane (zoom)" z "resize-pane -Z" \
  "Swap(exchange) Pane" e "choose-tree 'swap-pane -t %%'" \
  "Kill Pane" x "kill-pane" \
  "Select Pane" "q" "display-panes" \
  "" \
  "Create Window" c "new-window -c '#{pane_current_path}'" \
  "Window 1" 1 "select-window -t 1" \
  "Window 2" 2 "select-window -t 2" \
  "Window 3" 3 "select-window -t 3" \
  "Window 4" 4 "select-window -t 4" \
  "Window 5" 5 "select-window -t 5" \
  "Select Window" "w" "choose-window" \
  "" \
  "Copy Mode" "[" "copy-mode" \
  "Paste" "]" "choose-buffer" \
  "" \
  "Reload ~/.tmux.conf" "" "source ~/.tmux.conf; display-message 'Config reloaded...'" \
  "Command" ":" "command-prompt" \
  "" \
  "New Session" S "command-prompt -p 'Session name:' 'new-session -s %1'" \
  "Detach Session" d "detach" \
  "Select Session" s "choose-session"

# Neovim Keybindings
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?\.?(view|n?vim?x?)(-wrapped)?(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }
bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# Window nubmering improvements
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on
set -g display-panes-time 5000

# Color Definitions
black="colour0"
red="colour1"
green="colour2"
blue="colour4"
yellow="colour3"
magenta="colour5"
cyan="colour6"
lightgray="colour7"
darkgray="colour8"
white="colour15"
mc_bg="#{?client_prefix,$yellow,#{?pane_in_mode,$green,$blue}}"
mc_fg="#{?client_prefix,$black,#{?pane_in_mode,$black,$black}}"

# Status Bar
set -g status "on"
set -g status-position top
set -g status-justify "left"
set -g status-style "fg=default,bg=black"
set -g status-left-length "100"
set -g status-left-style "fg=$mc_fg,bg=$mc_bg"
set -g status-left "#[fg=$mc_fg,bg=$mc_bg] #{?pane_in_mode,[#{pane_mode}] ,}#S #[bg=black] "
set -g status-right-length "100"
set -g status-right-style "fg=$white,bg=$darkgray"
set -g status-right " 󰃭 %Y-%m-%d   %H:%M #[fg=$mc_fg,bg=$mc_bg] 󱩛 #{user}@#h "
setw -g window-status-activity-style "fg=$white,bg=$black"
setw -g window-status-separator " "
setw -g window-status-style "fg=$white,bg=$darkgray"
setw -g window-status-format " #I  #W "
setw -g window-status-current-style "fg=$black,bg=$white"
setw -g window-status-current-format " #I  #W "

#Pane configuration
set -g pane-border-lines "single"
set -g pane-border-indicators "colour"
set -g pane-border-status "off"
set -g pane-border-format "#P. #T"

# Shell setup
set-option -g default-shell /bin/zsh
set -g history-limit 50000
set -g display-time 4000
set -g status-interval 5
set -g focus-events on
setw -g aggressive-resize on
set-option -sg escape-time 10
